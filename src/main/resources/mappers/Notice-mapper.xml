<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="NoticeMapper">
    
    <insert id="insertNotice">
    <!-- 공지사항 작성 / 파일이 있을 경우-->
	    <if test="renameFileName != null">
	    	insert all 
	    	into tb_notice values(SEQ_NOTICE.nextval, #{userId}, #{nTitle}, #{nContent}, SYSDATE, DEFAULT, DEFAULT, #{nDong})
	    	into tb_file values(SEQ_FILE.nextval, NULL, #{renameFileName}, SEQ_notice.currval, NULL)
	    	select *
	   		 	from dual
	    </if>
	<!-- 공지사항 작성 / 파일이 없을 경우 -->
	     <if test="renameFileName == null">
	    	insert all 
	    	into tb_notice values(SEQ_NOTICE.nextval, #{userId}, #{nTitle}, #{nContent}, SYSDATE, DEFAULT, DEFAULT, #{nDong})
	    	into tb_file values(SEQ_FILE.nextval, NULL, NULL, SEQ_notice.currval, NULL)
	    	select *
	   		 	from dual
	    </if>
    </insert>
    
    <!-- 공지사항 전체 글 갯수 가져오기 -->
    <select id="getNoticeListCount" resultType="_int">
		select count(*)
		from tb_notice
			  join tb_user using(user_id)
		where notice_delete = 'N' and apt_name = #{aptName}
	</select>
	
	<!-- 공지사항 리스트 페이지 가져오기 -->
	<select id="selectList" resultMap="noticeResultSet">
		select *
		from tb_notice
			 join tb_user using(user_id)
		where notice_delete = 'N' and apt_name = #{aptName}
		order by notice_no desc
	</select>
	
	<resultMap type="Notice" id="noticeResultSet">
		<id property="nNo" column="NOTICE_NO"/>
		<result property="userId" column="USER_ID"/>
		<result property="nTitle" column="NOTICE_TITLE"/>
		<result property="nContent" column="NOTICE_CONTENT"/>
		<result property="nCreateDate" column="NOTICE_DATE"/>
		<result property="nStatus" column="NOTICE_DELETE"/>
		<result property="nCount" column="NOTICE_COUNT"/>
		<result property="nDong" column="NOTICE_DONG"/>
<!-- 		<result property="renameFileName" column="FILE_NAME"/> -->
<!-- 		<result property="nModifyDate" column="?"/> -->
<!-- 		<result property="originalFileName" column="?"/> -->
	</resultMap>
	
	<!-- 공지사항 조회 카운트 -->
	<update id="addReadCount">
		update tb_notice
		set notice_count = notice_count +1
		where notice_no = #{nNo}
	</update>
	
	<!-- 공지사항 상세조회 -->
	<select id="selectNotice" resultMap="noticeResultSet2">
		select notice_no, user_id, notice_title, notice_content, notice_date, notice_count, nickname, user_file, file_name, notice_dong
		from tb_notice
           join tb_user using(user_id)
           join tb_file using(notice_no)
		where notice_no = #{nNo} and notice_delete = 'N'
	</select>
	
	<resultMap type="Notice" id="noticeResultSet2">
		<id property="nNo" column="NOTICE_NO"/>
		<result property="userId" column="USER_ID"/>
		<result property="nTitle" column="NOTICE_TITLE"/>
		<result property="nContent" column="NOTICE_CONTENT"/>
		<result property="nCreateDate" column="NOTICE_DATE"/>
		<result property="nCount" column="NOTICE_COUNT"/>
		<result property="noticeNickname" column="NICKNAME"/>
		<result property="renameFileName" column="FILE_NAME"/><!-- 업로드 파일 -->
		<result property="noticeFile" column="USER_FILE"/><!--프로필사진  -->
		<result property="nDong" column="NOTICE_DONG"/>
	</resultMap>
	
	<!-- 공지사항 업데이트 / 파일이 있는 게시글의 파일만 업데이트(파일테이블)-->
	<update id="updateNotice_tb_file">
    	update tb_file
    	set file_name = #{renameFileName}
		where notice_no = #{nNo}	
	</update>
	
	<!-- 공지사항 업데이트 / 글만 업데이트(노티스테이블)-->
	<update id="updateNotice_tb_notice">
		update tb_notice
		set notice_title = #{nTitle}, notice_content = #{nContent}, notice_dong = #{nDong}
		where notice_no = #{nNo}
	</update>
	
	<!-- 공지사항 삭제 -->
	<update id="deleteNotice">
		update tb_notice
		set NOTICE_DELETE = 'Y'
		where NOTICE_NO = #{nNo}
	</update>
	
	<!-- 댓글리스트 불러오기 -->
	<select id="NoticeCommentList" resultMap="replyResultSet">
		select reply_no, notice_no, user_id, reply_content, comment_date, decyn, nickname, user_file
		from tb_comment
           join tb_user using(user_id)
		where notice_no = #{nNo} and comments_delete = 'N'
        order by reply_no desc
	</select>
	
	<resultMap type="Comment" id="replyResultSet">
		<id property="rNo" column="REPLY_NO"/>
		<result property="noticeNo" column="NOTICE_NO"/>
		<result property="rContent" column="REPLY_CONTENT"/>
		<result property="rUserId" column="USER_ID"/>
		<result property="rCreateDate" column="COMMENT_DATE"/>
		<result property="rDecYN" column="DECYN"/>
		<result property="rStatus" column="COMMENTS_DELETE"/>
		<result property="nickname" column="NICKNAME"/>
		<result property="userFile" column="USER_FILE"/><!--프로필사진  -->
	</resultMap>
	
	<!-- 댓글 등록 -->
	<insert id="insertNoticeComment">
		insert into tb_comment
		values(SEQ_REPLY.nextval, null, #{noticeNo}, null, #{rUserId}, #{rContent}, sysdate, 0, default)
	</insert>
	
	<!--댓글 수정  -->
	<update id="updateNoticeComment">
		update tb_comment
		set REPLY_CONTENT = #{rContent}, COMMENT_DATE = SYSDATE
		where REPLY_NO = #{rNo}
	</update>
	
	<!-- 댓글 삭제 -->
	<update id="deleteNoticeComment">
		update tb_comment
		set COMMENTS_DELETE = 'Y'
		where REPLY_NO = #{rNo}
	</update>
	
	<!-- 공지사항 검색키워드에 따른 전체 수 가져오기-->
	<select id="getSearchResultListCount" resultType="_int">
		select count(*)
		from tb_notice 
			join tb_user using(user_id)
		where notice_delete = 'N' and apt_name = #{aptName}
		<if test="nTotal != null">
			and (user_id like '%' || #{nTotal} || '%'
			or notice_title like '%' || #{nTotal} || '%'
			or notice_Content like '%' || #{nTotal} || '%'
			or notice_dong like '%' || #{nTotal} || '%')
		</if>
		<if test="nTitle != null">
			and notice_title like '%' || #{nTitle} || '%'
		</if>
		<if test="nContent != null">
			and notice_Content like '%' || #{nContent} || '%'
		</if>
		<if test="nDong != null">
			and notice_dong like '%' || #{nDong} || '%'
		</if>
	</select>
	
	<!-- 공지사항 검색한 리스트 가져오기 -->
	<select id="selectSearchResultList" resultMap="noticeResultSet">
		select *
		from tb_notice
			join tb_user using(user_id)
		where notice_delete = 'N' and apt_name = #{aptName}
		<choose>
			<when test="nTotal != null">
				and (user_id like '%' || #{nTotal} || '%'
				or notice_title like '%' || #{nTotal} || '%'
				or notice_Content like '%' || #{nTotal} || '%'
				or notice_dong like '%' || #{nTotal} || '%')
			</when>
			<when test="nTitle != null">
				and notice_title like '%' || #{nTitle} || '%'
			</when>
			<when test="nDong != null">
				and notice_dong like '%' || #{nDong} || '%'
			</when>
			<otherwise>
				and notice_Content like '%' || #{nContent} || '%'
			</otherwise>
		</choose>
		order by notice_no desc
	</select>
	
	<!-- 아파트 동 목록 가져오기 -->
	<select id="selectcDonglist" resultType="String">
		select apt_dong
		from tb_apart
		where apt_delete = 'N' and apt_name =#{aptName}
	</select>
	
	<!-- 공지사항 정렬 가져오기 -->
	<select id="selectSortCondition" resultMap="noticeResultSet">
		select *
		from tb_notice
			join tb_user using(user_id)
		where notice_delete = 'N' and apt_name = #{aptName}
		<if test = "nSortCondition == 'hits'">
			order by notice_count desc
		</if>
		<if test = "nSortCondition == 'latest'">
			order by notice_no desc
		</if>		
	</select>
	
	<!-- 대댓글 등록 -->
	<insert id="insertComment2">
		insert into tb_comment_re
		values(SEQ_COMMENT_RE.nextval, #{rNo}, #{rUserId}, #{rContent}, default, default, default )
	</insert>
	
	<!--댓글 가져오기 -->
	<select id="selectComment2" resultMap="Comment2ResultSet">
		select REPLY_NO, RE_REPLY_NO, USER_ID, REPLY_CONTENT, COMMENT_DATE, DECYN, COMMENTS_DELETE, USER_FILE, NICKNAME
		from tb_comment_re
			join tb_user using(user_ID)
		where comments_delete = 'N' and reply_no = #{rNo}
		order by RE_REPLY_NO DESC
	</select>
	
	<resultMap type="Comment2" id="Comment2ResultSet">
		<id property="rrNo" column="RE_REPLY_NO"/>
		<result property="rNo" column="REPLY_NO"/>
		<result property="rUserId" column="USER_ID"/>
		<result property="rContent" column="REPLY_CONTENT"/>
		<result property="rCreateDate" column="COMMENT_DATE"/>
		<result property="rDecYN" column="DECYN"/>
		<result property="rDecYN" column="COMMENTS_DELETE"/>
		<result property="nickname" column="NICKNAME"/>
		<result property="userFile" column="USER_FILE"/>
	</resultMap>
	
	<select id="getnNo" resultType="_int">
		SELECT NOTICE_NO FROM TB_NOTICE
		WHERE USER_ID = #{writer} AND NOTICE_TITLE = #{title}
	</select>
</mapper>